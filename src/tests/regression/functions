#!/bin/bash
#
# Functions for the regression test scripts
#

if [ -z "$__p15init__" ]; then
	__p15init__=1

	p15base=${P15_BASE:-../..}
	p15temp=${P15_TEMP:-./test-data}

	p15crypt=$p15base/tools/pkcs15-crypt
	p15tool=$p15base/tools/pkcs15-tool
	p15init=$p15base/tools/pkcs15-init
	p11tool=$p15base/tools/pkcs11-tool
	p15log=$p15temp/test.log

	for bin in $p15tool $p15crypt $p15init; do
		test -x $bin && continue
		echo "*** Missing binary $bin" >&2
		exit 1
	done

	mkdir -p $p15temp
	trap atexit 0 1 2 13 15

	# Eat any arguments given on the command line
	while [ $# -ne 0 ]; do
		case $1 in
		--use-default-transport-key|--split-key)
			p15init="$p15init $1";;
		--reader)
			P15_READER=$2
			shift;;
		*)	fatal "Unexpected option $1";;
		esac
		shift
	done

	if test "$P15_READER"; then
		p15crypt="$p15crypt --reader $P15_READER"
		p15tool="$p15tool --reader $P15_READER"
		p15init="$p15init --reader $P15_READER"
	fi

	# Redirect output to log file, but keep copies of
	# stdout/stderr descriptors on fd 3 and 4
	exec 3>&1 4>&2 >$p15log 2>&1

	test_failed=false
fi

# Clobber log file
cp /dev/null $p15log

function atexit {

	test "$p15temp" && rm -rf $p15temp

	if ! $test_failed; then
		msg <<-EOF
		:::
		::: Test set completed successfully
		:::
EOF
	fi
}

function msg {

	if [ $# -eq 0 ]; then
		# This is a here script
		cat >&3
	else
		echo "::: $*" >&3
	fi
}

function yesno {

	while true; do
		echo -n "$* [y/n]" >&3
		read -n 1 ans
		echo >&3

		case $ans in
		[yY])	return 0;;
		[nN])	return 1;;
		esac
		echo "*** Answer must be y or n"
	done
}

function fail {

	(
		echo "*** $*"
		echo "---"
		cat $p15log
	) >&4
	test_failed=true
	exit 1
}

function error {

	echo "*** $*" >&4
}

function fatal {

	echo "*** $*" >&4
	exit 1;
}

function success {

	msg "SUCCESS"
}

function run_display_output {

	run_check_status "$@" >&3 2>&4
}

function run_check_status {

	echo ":::::: run_check_status $*"
	"$@" || fail "Command failed (status code $?): $*"
}

function run_check_output {

	msg=$1
	shift

	echo ":::::: run_check_output \"$1\" $*"
	out=`eval "$@" 2>&1`

	# Make sure output makes it to log file
	echo $out

	case $out in
	"$msg")	return 0;;
	*)	fail "Command failed (expected $msg): $*";;
	esac
}
